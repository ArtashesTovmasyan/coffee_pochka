import os
import logging
import json

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ JSON

def load_recipes(path='recipes.json'):
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

recipes = load_recipes()
categories = list(recipes.keys())

# /start –∏ /help: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if msg is None:
        return
    buttons = [[InlineKeyboardButton(cat, callback_data=f"cat|{cat}")] for cat in categories]
    markup = InlineKeyboardMarkup(buttons)
    await msg.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CoffeeBot ‚òïÔ∏è\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query is None or query.data is None or query.message is None:
        return
    await query.answer()

    action, key = query.data.split("|", 1)

    # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if action == "cat":
        drinks = list(recipes.get(key, {}))
        buttons = [[InlineKeyboardButton(dr, callback_data=f"drink|{key}|{dr}")] for dr in drinks]
        buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back|categories")])
        markup = InlineKeyboardMarkup(buttons)
        await context.bot.edit_message_text(
            chat_id=query.message.chat.id,
            message_id=query.message.message_id,
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{key}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:",
            reply_markup=markup
        )
        return

    # –í—ã–±—Ä–∞–Ω –Ω–∞–ø–∏—Ç–æ–∫
    if action == "drink":
        cat, dr = key.split("|", 1)
        data = recipes.get(cat, {}).get(dr)
        if data is None:
            return
        text = f"*{dr}*\n\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
        text += "\n".join(f"- {ing}" for ing in data["ingredients"])
        text += f"\n\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n{data['instructions']}"
        buttons = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat|{cat}")],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back|categories")],
        ]
        markup = InlineKeyboardMarkup(buttons)
        await context.bot.edit_message_text(
            chat_id=query.message.chat.id,
            message_id=query.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=markup
        )
        return

    # –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if action == "back" and key == "categories":
        await start(update, context)
        return

# –õ–æ–≤–∏–º –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if msg:
        await msg.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞: %s", context.error)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_error_handler(error_handler)

    print("Bot is running...")
    app.run_polling()
