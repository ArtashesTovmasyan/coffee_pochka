import logging
import json

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ JSON
def load_recipes(path='recipes.json'):
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

recipes = load_recipes()
categories = list(recipes.keys())

# /start –∏ /help: –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton(cat, callback_data=f"cat|{cat}")]
        for cat in categories
    ]
    markup = InlineKeyboardMarkup(buttons)
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CoffeeBot ‚òïÔ∏è\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª

    data = query.data.split("|", 1)
    action, key = data if len(data) == 2 else (None, None)

    # –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if action == "cat":
        drinks = list(recipes.get(key, {}).keys())
        buttons = [
            [InlineKeyboardButton(dr, callback_data=f"drink|{key}|{dr}")]
            for dr in drinks
        ]
        # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back|categories")])
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{key}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=markup)
        return

    # –ù–∞–∂–∞–ª–∏ –Ω–∞ –Ω–∞–ø–∏—Ç–æ–∫
    if action == "drink":
        category, drink = key.split("|", 1)
        data = recipes[category][drink]
        text = f"*{drink}*\n\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
        text += "\n".join(f"- {ing}" for ing in data["ingredients"])
        text += f"\n\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n{data['instructions']}"

        # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–∏—Ç–∫–æ–≤¬ª
        buttons = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat|{category}")],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back|categories")],
        ]
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=markup)
        return

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if action == "back" and key == "categories":
        await start(update, context)
        return

# –õ–æ–≤–∏–º –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞)
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞: %s", context.error)

if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = "YOUR_TOKEN_HERE"

    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_error_handler(error_handler)

    print("Bot is running...")
    app.run_polling()
